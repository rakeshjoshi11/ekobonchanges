c
b
b= a/1000
a = (100.to_f * 100.to_f)
params[:power_source] == "\"renewable\""
n
params
c
 render json: {user_info: {transaction_id => transaction_id}}, status: :created
 render json: {user_info: {transaction_id=> transaction_id}}, status: :created
 render json: {user_info: {@trans=> @trans}}, status: :created
n
c
render json: {user_info: {@trans=> @trans}}, status: :created
render json: {user_info: {@trans=> @trans},transaction_id=> transaction_id}, status: :created
c
render json: {user_info: {@trans=> @trans},transaction_id=> transaction_id}, status: :created
render json: {user_info: {@trans=> @trans}}, status: :created
n
c
@transaction_id
render json: {user_info: {@trans=> @trans},transaction_id=> @transaction_id}, status: :created
render json: {user_info: {@trans=> @trans}}, status: :created
n
c
render json: {user_info: {@trans=> @trans}}
render json: {user_info: {@trans=> @trans, @transaction_id}}
render json: {user_info: {@trans=> @trans}@transaction_id}
@transaction_id = SecureRandom.hex
c
render json: {user_info: {@trans=> @trans}}
@transaction_id = SecureRandom.hex
n
c
params
parms
c
params
paranms
c
trans_params
params
c
trans_params
params
c
params
c
params
c
params
c
params
c
User.count
@users = User.all
c
User.count
User.all
@users = User.all
c
User.all
params
user = User.find_by(email: params[:email])
c
user = User.find_by(email: params[:email])
user
user.present?
n
c
User.find_by(email: params[:email])
User.find_by(reset_password_token: params[:email])
User.find_by(reset_password_token: params[:email]
params[:email]
params
 User.find_by(reset_password_token: token)
params
user
token
token.super
token.user
token
n
c
token
n
c
user = User.find_by(reset_password_token: token)
token
n
c
params
n
token = params[:token].to_s
c
User.last
User
n
c
params[:email].blank?
token
n
tn
c
@user.updated_at
@user.created_at
@user.id
@user
c
@user.name
@user
n
c
params
c
render json: {b: b},status: :ok
n
c
render json: { message: 'your carbonoffet is calculated' }, status: :ok
n
c
JsonWebToken.encode(user_id: @user.id)
Json_Web_Token.encode(user_id: @user.id)
Json_Web_Token
JsonWebToken
token = JsonWebToken.encode(user_id: @user.id)
c
token = JWT.encode(user_id: @user.id)
@user&.authenticate(params[:password])
@user
c
JsonWebToken.encode
@user&.authenticate(params[:password])
@user
c
error
n
c
JsonWebToken.encode
JsonWebToken.encode(user_id: @user.id)
token = JsonWebToken.encode(user_id: @user.id)
@user = User.find_by_email(params[:email])
c
@user.id
token = JsonWebToken.encode(user_id: @user.id)
@user&.authenticate(params[:password])
 @user = User.find_by_email(params[:email])
params
c
params
n
c
params
n
c
@user = User.find_by_email(params[:email])
params
n
c
n
c
n
user_params
params
c
print b
b= a/1000
a = (108.to_f * 100.to_f)
params[:fuel_type] == "\"petrol\""
n
params[:fuel_type].present?
c
b= a/1000
b = a/1000
a = (108.to_f * 100.to_f)
params[:fuel_type] == "\"petrol\""
params
c
params
c
  a = (55.to_f * 500.to_f)
 a = (55.coal.to_f * 200.to_f)
a = (55.coal.to_f * 100.to_f)
b
c
   b= a/1000
a = (55.to_f * 500.to_f)
a = (55.coal.to_f * 100.to_f)
b
#{b}
n
c
params[:power_source]
n
params[:fuel_type]
c
body
headers
status
n
"\"petrol\""
n
params
c
params[:fuel_type] == "\"lpg\""
params[:fuel_type] == "lpg"
params[:fuel_type]
params
b= a/1000
a = (67.to_f * 300.to_f)
n
params
c
b= a/1000
b = a/1000
a/1000
a = (108.to_f * 100.to_f)
n
c
params[:fuel_type]
params
b=a/1000
a/1000
b = a/1000
 a = (95.to_f * 200.to_f)
n
params[:fuel_type]
params
c
params
c
params
c
params
c
b
n
c
params[:case][:fuel_type]
continue
 a/1000
 a\1000
 a/1000
 a%1000
b = a%1000
b = a/1000
n
c
when "petrol"
params[:case][:fuel_type]
params
c
b
n
c
b= a/1000
